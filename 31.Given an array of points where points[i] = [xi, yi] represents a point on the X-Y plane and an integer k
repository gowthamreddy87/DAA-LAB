#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Define a structure to hold point and its distance
typedef struct {
    int x;
    int y;
    double dist;
} Point;

// Comparator function for the min-heap
int compare(const void* a, const void* b) {
    Point* p1 = (Point*)a;
    Point* p2 = (Point*)b;
    return (p1->dist > p2->dist) - (p1->dist < p2->dist);
}

// Function to find the k closest points to the origin
int** kClosest(int** points, int pointsSize, int k, int* returnSize) {
    // Allocate space for points
    Point* pointArray = (Point*)malloc(pointsSize * sizeof(Point));
    
    // Compute distances and prepare the array
    for (int i = 0; i < pointsSize; i++) {
        pointArray[i].x = points[i][0];
        pointArray[i].y = points[i][1];
        pointArray[i].dist = sqrt(points[i][0] * points[i][0] + points[i][1] * points[i][1]);
    }
    
    // Sort the points based on distance using qsort
    qsort(pointArray, pointsSize, sizeof(Point), compare);
    
    // Allocate memory for the result
    int** result = (int**)malloc(k * sizeof(int*));
    for (int i = 0; i < k; i++) {
        result[i] = (int*)malloc(2 * sizeof(int));
        result[i][0] = pointArray[i].x;
        result[i][1] = pointArray[i].y;
    }
    
    // Set the return size
    *returnSize = k;
    
    // Free the allocated point array
    free(pointArray);
    
    return result;
}

// Example usage
int main() {
    // Example input
    int pointsArray[5][2] = {{1, 3}, {-2, 2}, {5, 8}, {0, 1}, {3, 4}};
    int* points[5];
    for (int i = 0; i < 5; i++) {
        points[i] = pointsArray[i];
    }
    
    int k = 3;
    int returnSize;
    
    // Find the k closest points
    int** closestPoints = kClosest(points, 5, k, &returnSize);
    
    // Print the result
    printf("The %d closest points are:\n", k);
    for (int i = 0; i < returnSize; i++) {
        printf("[%d, %d]\n", closestPoints[i][0], closestPoints[i][1]);
        free(closestPoints[i]);
    }
    free(closestPoints);
    
    return 0;
}
