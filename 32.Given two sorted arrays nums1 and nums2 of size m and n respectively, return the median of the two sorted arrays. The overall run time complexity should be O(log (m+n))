#include <stdio.h>
#include <limits.h>

// Helper function to find the median of two sorted arrays
double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    // Ensure nums1 is the smaller array
    if (nums1Size > nums2Size) {
        int* temp = nums1;
        nums1 = nums2;
        nums2 = temp;
        int tempSize = nums1Size;
        nums1Size = nums2Size;
        nums2Size = tempSize;
    }

    int imin = 0, imax = nums1Size, half_len = (nums1Size + nums2Size + 1) / 2;
    double max_of_left, min_of_right;

    while (imin <= imax) {
        int i = (imin + imax) / 2;
        int j = half_len - i;

        // Partition nums1 into left and right
        int nums1_left_max = (i == 0) ? INT_MIN : nums1[i - 1];
        int nums1_right_min = (i == nums1Size) ? INT_MAX : nums1[i];
        
        // Partition nums2 into left and right
        int nums2_left_max = (j == 0) ? INT_MIN : nums2[j - 1];
        int nums2_right_min = (j == nums2Size) ? INT_MAX : nums2[j];
        
        if (nums1_left_max <= nums2_right_min && nums2_left_max <= nums1_right_min) {
            // We have partitioned the arrays correctly
            if ((nums1Size + nums2Size) % 2 == 0) {
                max_of_left = fmax(nums1_left_max, nums2_left_max);
                min_of_right = fmin(nums1_right_min, nums2_right_min);
                return (max_of_left + min_of_right) / 2.0;
            } else {
                max_of_left = fmax(nums1_left_max, nums2_left_max);
                return max_of_left;
            }
        } else if (nums1_left_max > nums2_right_min) {
            // We are too far right in nums1, need to move left
            imax = i - 1;
        } else {
            // We are too far left in nums1, need to move right
            imin = i + 1;
        }
    }

    // If we reach here, the input arrays were not sorted or the sizes were invalid
    return -1;
}

// Example usage
int main() {
    int nums1[] = {1, 3};
    int nums2[] = {2};
    int nums1Size = sizeof(nums1) / sizeof(nums1[0]);
    int nums2Size = sizeof(nums2) / sizeof(nums2[0]);

    double median = findMedianSortedArrays(nums1, nums1Size, nums2, nums2Size);
    printf("The median is: %f\n", median);

    return 0;
}
