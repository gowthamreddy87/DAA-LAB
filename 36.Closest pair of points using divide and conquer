import math

def closest_pair(points):
    # Helper function to compute the distance between two points
    def dist(p1, p2):
        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)
    
    # Recursive function to find the closest pair of points
    def closest_pair_recursive(px, py):
        n = len(px)
        if n <= 3:
            # Use brute force for small number of points
            min_dist = float('inf')
            for i in range(n):
                for j in range(i + 1, n):
                    min_dist = min(min_dist, dist(px[i], px[j]))
            return min_dist
        
        # Divide points into two halves
        mid = n // 2
        mid_x = px[mid][0]
        
        # Divide points into left and right halves
        Qx = px[:mid]
        Rx = px[mid:]
        Qy = [p for p in py if p[0] <= mid_x]
        Ry = [p for p in py if p[0] > mid_x]
        
        # Recursive calls
        d1 = closest_pair_recursive(Qx, Qy)
        d2 = closest_pair_recursive(Rx, Ry)
        d = min(d1, d2)
        
        # Merge step: check the strip around the middle line
        strip = [p for p in py if abs(p[0] - mid_x) < d]
        
        # Find the closest pair in the strip
        min_strip_dist = float('inf')
        for i in range(len(strip)):
            for j in range(i + 1, min(i + 7, len(strip))):
                min_strip_dist = min(min_strip_dist, dist(strip[i], strip[j]))
        
        return min(d, min_strip_dist)
    
    # Sort points by x and y coordinates
    px = sorted(points, key=lambda p: p[0])
    py = sorted(points, key=lambda p: p[1])
    
    # Find the closest pair
    return closest_pair_recursive(px, py)

# Example usage
if __name__ == "__main__":
    points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
    print("The smallest distance is:", closest_pair(points))
