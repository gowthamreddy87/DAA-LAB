#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MOD 1000000007

// Function to compute the maximum sum of a non-adjacent subsequence
long long maxNonAdjacentSum(int* nums, int numsSize) {
    if (numsSize == 0) return 0;
    if (numsSize == 1) return nums[0];

    long long include = nums[0];
    long long exclude = 0;
    long long new_include, new_exclude;

    for (int i = 1; i < numsSize; i++) {
        new_include = exclude + nums[i];
        new_exclude = (include > exclude) ? include : exclude;

        include = new_include;
        exclude = new_exclude;
    }

    return (include > exclude) ? include : exclude;
}

int main() {
    int nums[] = {3, 2, 5, 10, 7}; // Example initial array
    int queries[][2] = {{1, 10}, {2, 15}}; // Example queries
    int queriesSize = sizeof(queries) / sizeof(queries[0]);
    int numsSize = sizeof(nums) / sizeof(nums[0]);

    long long totalSum = 0;

    for (int i = 0; i < queriesSize; i++) {
        int pos = queries[i][0];
        int newValue = queries[i][1];

        // Update nums array
        nums[pos] = newValue;

        // Compute the result for the updated array
        long long result = maxNonAdjacentSum(nums, numsSize);
        totalSum = (totalSum + result) % MOD;
    }

    printf("The sum of all query answers is: %lld\n", totalSum);

    return 0;
}
