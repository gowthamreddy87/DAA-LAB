#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_CITIES 100

int findTheCity(int n, int edges[MAX_CITIES][3], int edgesSize, int distanceThreshold) {
    int dist[MAX_CITIES][MAX_CITIES];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) dist[i][j] = 0;
            else dist[i][j] = INT_MAX;
        }
    }

    for (int i = 0; i < edgesSize; i++) {
        int from = edges[i][0], to = edges[i][1], weight = edges[i][2];
        dist[from][to] = weight;
        dist[to][from] = weight;
    }

    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX) {
                    dist[i][j] = (dist[i][j] < dist[i][k] + dist[k][j]) ? dist[i][j] : dist[i][k] + dist[k][j];
                }
            }
        }
    }

    int cityWithMinReachable = -1, minCount = INT_MAX;
    for (int i = 0; i < n; i++) {
        int count = 0;
        for (int j = 0; j < n; j++) {
            if (dist[i][j] <= distanceThreshold) count++;
        }
        if (count <= minCount) {
            minCount = count;
            cityWithMinReachable = i;
        }
    }

    return cityWithMinReachable;
}

int main() {
    int n = 4;
    int edges[4][3] = {{0, 1, 3}, {1, 2, 1}, {1, 3, 4}, {2, 3, 1}};
    int distanceThreshold = 4;
    int result = findTheCity(n, edges, 4, distanceThreshold);
    printf("%d\n", result);
    return 0;
}
