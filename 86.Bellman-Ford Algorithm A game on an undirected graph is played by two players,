#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

int dfs(int mouse, int cat, int turn, int graph[MAX_NODES][MAX_NODES], int visited[MAX_NODES][MAX_NODES][2]) {
    if (mouse == 0) return 1; // Mouse wins
    if (mouse == cat) return 2; // Cat wins
    if (visited[mouse][cat][turn]) return 0; // Draw
    visited[mouse][cat][turn] = 1;

    if (turn == 0) { // Mouse's turn
        for (int i = 0; i < MAX_NODES; i++) {
            if (graph[mouse][i]) {
                int result = dfs(i, cat, 1, graph, visited);
                if (result == 1) return 1; // If mouse can win
            }
        }
        return 0; // If no winning move
    } else { // Cat's turn
        for (int i = 0; i < MAX_NODES; i++) {
            if (graph[cat][i] && i != 0) {
                int result = dfs(mouse, i, 0, graph, visited);
                if (result == 2) return 2; // If cat can win
            }
        }
        return 0; // If no winning move
    }
}

int catMouseGame(int graph[MAX_NODES][MAX_NODES], int n) {
    int visited[MAX_NODES][MAX_NODES][2] = {0};
    return dfs(1, 2, 0, graph, visited);
}

int main() {
    int graph1[MAX_NODES][MAX_NODES] = {{0}, {0}, {1, 1}, {0}, {0}, {0}};
    int result1 = catMouseGame(graph1, 6);
    printf("%d\n", result1); // Output: 0

    int graph2[MAX_NODES][MAX_NODES] = {{0}, {0}, {1, 1}, {0}};
    int result2 = catMouseGame(graph2, 4);
    printf("%d\n", result2); // Output: 1

    return 0;
}
